mu <- mean(x)
sigma <- sd(dev)
Z <- ( x - mu ) / sd
return(Z)
}
sdFromMean(1:6)
sdFromMean <- function( x ){
# Function body
mu <- mean(x)
sigma <- sd(x)
Z <- ( x - mu ) / sd
return(Z)
}
sdFromMean(1:6)
sdFromMean <- function( x ){
# Function body
mu <- mean(x)
sigma <- sd(x)
Z <- ( x - mu ) / sigma
return(Z)
}
sdFromMean(1:4)
# Running the function
sdFromMean(1:10)
sdFromMean(runif(10))
sdFromMean(c(1:10,NA,11:20))
sdFromMean <- function( x , removeNAs ){
# Function body
mu <- mean(x,na.rm=removeNAs)
sigma <- sd(x,na.rm=removeNAs)
Z <- ( x - mu ) / sigma
return(Z)
}
# Running the function
sdFromMean(c(1:5,NA,6:10))
sdFromMean <- function( x , removeNAs ){
# Function body
mu <- mean(x,na.rm=removeNAs)
sigma <- sd(x,na.rm=removeNAs)
Z <- ( x - mu ) / sigma
return(Z)
}
# Running the function
sdFromMean(c(1:5,NA,6:10),removeNAs = TRUE)
# Running the function
sdFromMean(c(1:5,NA,6:10),removeNAs = TRUE) # Works
sdFromMean(c(1:10)) # ... fails --- missing argument!
# Running the function
sdFromMean(c(1:5,NA,6:10),removeNAs = TRUE) # Works
sdFromMean(c(1:10)) # ... fails --- missing argument!
sdFromMean <- function( x , removeNAs=FALSE ){
# Function body
mu <- mean(x,na.rm=removeNAs)
sigma <- sd(x,na.rm=removeNAs)
Z <- ( x - mu ) / sigma
return(Z)
}
# Running the function
sdFromMean(c(1:5,NA,6:10),removeNAs = TRUE) # Works
sdFromMean(c(1:10)) # ... fails --- missing argument!
# Try it!
topRows(iris,n=3)
topRows <- function(df,n=1){
df[1:n,]
}
# Try it!
topRows(iris,n=3)
sample(paste0("GeneID:",round(runif(10),digits=2)))
e <- data.frame(
gene = rep(paste0("GeneID:",round(runif(6),digits=2)),each=sample(7:12))
)
each=sample(7:12)
paste0("GeneID:",round(runif(6),digits=2))
sample(7:12)
e <- data.frame(
gene = rep(paste0("GeneID:",round(runif(6),digits=2)),each=sample(7:12))
)
e <- data.frame(
gene = rep(paste0("GeneID:",round(runif(6),digits=2)), times=sample(7:12))
)
e
e <- data.frame(
gene = rep(paste0("GeneID:",round(runif(6),digits=2)),times=sample(7:12)),
tpm  = runif(0,1) ** 4
)
e
e <- data.frame(
gene = rep(paste0("GeneID:",round(runif(6),digits=2)),times=sample(7:12)),
tpm  = runif(sum(7:12),0,1) ** 4
)
e
e <- data.frame(
gene = rep(paste0("GeneID:",round(runif(6),digits=2)),times=sample(7:12)),
tpm  = runif(sum(7:12),0,1) ** 3
)
e
e <- data.frame(
geneID = rep(paste0("GeneID:",round(runif(6),digits=2)),times=sample(7:12)),
tpm  = runif(sum(7:12),0,1) ** 3
)
e <- data.frame(
geneID = rep(paste0("GeneID:",round(runif(6),digits=2)),times=sample(7:12)),
tpm  = runif(sum(7:12),0,1) ** 3
)
highestExpGeneID <- function(edf){
edf[edf$tpm==max(edf$tpm),]$geneID
}
highestExpGeneID(e)
e <- data.frame(
geneID = rep(paste0("GeneID:",round(runif(6),digits=2)),times=nEachGene),
tpm  = runif(sum(7:12),0,1) ** 3
)
nEachGene <- sample(7:12)
e <- data.frame(
geneID = rep(paste0("GeneID:",round(runif(6),digits=2)),times=nEachGene),
tpm  = runif(sum(7:12),0,1) ** 3
)
e <- expand.grid(
geneID = "GeneID:",round(runif(6),digits=2),
tissue = c("Stem","Leaf","Root","Influorescence"),
tpm  = runif(6*4,0,1) ** 3
)
highestExpGeneID <- function(edf){
edf[edf$tpm==max(edf$tpm),]$geneID
}
# Test it ...
highestExpGeneID(e)
e <- expand.grid(
geneID = "GeneID:",round(runif(6),digits=2),
tissue = c("Stem","Leaf","Root","Influorescence"),
tpm  = runif(6*4,0,1) ** 3
)
e
nEachGene <- sample(7:12)
e <- expand.grid(
geneID = "GeneID:",round(runif(6),digits=2),
tissue = c("Stem","Leaf","Root","Influorescence")
)
e$tpm <- runif(6*4,0,1) ** 3
e
e <- expand.grid(
geneID = "GeneID:",round(runif(6),digits=2),
tissue = c("Stem","Leaf","Root","Influorescence")
)
e$tpm <- runif(6*4,0,1) ** 3
e
e <- expand.grid(
geneID = paste0("GeneID:",round(runif(6),digits=2)),
tissue = c("Stem","Leaf","Root","Influorescence")
)
e
e$tpm <- runif(6*4,0,1) ** 3
# Test it ...
highestExpGeneID(e)
highestExpGeneID <- function(edf){
edf[edf$tpm==max(edf$tpm),]$geneID
}
# Test it ...
highestExpGeneID(e)
e <- expand.grid(
geneID = paste0("GeneID:",round(runif(6),digits=2)),
tissue = c("Stem","Leaf","Root","Influorescence"),
stringsAsFactors = F
)
e$tpm <- runif(6*4,0,1) ** 3
highestExpGeneID <- function(edf){
edf[edf$tpm==max(edf$tpm),]$geneID
}
# Test it ...
highestExpGeneID(e)
highestExpGeneID <- function(edf){
edf[edf$tpm==max(edf$tpm),]$tissue
}
# Test it ...
highestExpGeneID(e)
e <- expand.grid(
e <- expand.grid(
geneID = paste0("GeneID:",1:6),
tissue = c("Stem","Leaf","Root","Influorescence"),
stringsAsFactors = F
)
e <- expand.grid(
geneID = paste0("GeneID:",1:6),
tissue = c("Stem","Leaf","Root","Influorescence"),
stringsAsFactors = F
)
e$tpm <- runif(6*4,0,1) ** 3
highestExpGeneID <- function(edf){
edf[edf$tpm==max(edf$tpm),]$tissue
}
# Test it ...
highestExpGeneID(e)
Now, use this function, along with data frame indexing, to find the highest expressing tissue of gene with ID "Gene:3"
e$geneId=="Gene:3"
e
e[e$geneId=="GeneID:3"]
e[e$geneID=="GeneID:3"]
e$geneID=="GeneID:3"]
e$geneID=="GeneID:3"
e[e$geneID=="GeneID:3",]
highestExpGeneID(e[e$geneID=="GeneID:3",])
unique(e$geneID)
lapply(1:5,function(x) { x + 100 })
lapply( letters , function(letter) {paste0(":",letter,":")} )
data <- data.frame( name = c("Fish","Frog","Pangolin","Wallaby","Turtle") , mammal = c(F,F,T,T,F) )
data
animals <- data.frame( name = c("Fish","Frog","Pangolin","Wallaby","Turtle") , mammal = c(F,F,T,T,F) )
# Which animals are mammals? Which are not?
lapply( c(TRUE,FALSE) , function(tf) {
animals[animals$mammal==tf,]$name
} )
unique(geneID)
e$geneID
unique(e$geneID)
highestExpressionEachGene <- lapply( unique(e$geneID) , function(g){
highestExpGeneID(e[e$geneID==g])
} )
unique(e$geneID)
highestExpGeneID
highestExpressionEachGene <- lapply( unique(e$geneID) , function(g){
highestExpGeneID(e[e$geneID==g,])
} )
highestExpressionEachGene
highestExpressionEachGene <- lapply( unique(e$geneID) , function(g){
highestExpGeneID(e[e$geneID==g,])
} )
highestExpressionEachGene
highestExpressionEachGene %>% unlist
highestExpressionEachGene %>% names
unlist(highestExpressionEachGene)
maxExp <- data.frame(
geneID       = unique(e$geneID),
maxExpTissue = sapply( unique(e$geneID) , function(g){
highestExpGeneID(e[e$geneID==g,])
} )
)
maxExp <- data.frame(
geneID       = unique(e$geneID),
maxExpTissue = sapply( unique(e$geneID) , function(g){ highestExpGeneID(e[e$geneID==g,]) } )
)
maxExp
e <- expand.grid(
geneID = paste0("GeneID:",1:6),
tissue = c("Stem","Leaf","Root","Influorescence"),
stringsAsFactors = F
)
e$tpm <- runif(6*4,0,1) ** 3
e[tissue==t,]$tpm
sapply( c("Leaf","Stem") , function(t) { e[tissue==t,]$tpm } )
e
lapply( c("Leaf","Stem") , function(t) { e[tissue==t,]$tpm } )
e <- expand.grid(
geneID = paste0("GeneID:",1:6),
tissue = c("Stem","Leaf","Root","Influorescence"),
stringsAsFactors = F
)
e$tpm <- runif(6*4,0,1) ** 3
e
lapply( c("Leaf","Stem") , function(t) { e[tissue==t,]$tpm } )
e
e[e$tissue==t,]$
e[e$tissue==t,]$
e[e$tissue==t,]$tpm
e[e$tissue==t,]
lapply( c("Leaf","Stem") , function(t) { e[e$tissue==t,]$tpm } )
lapply( c("Leaf","Stem") , function(t) { median( e[e$tissue==t,]$tpm ) } )
# We need to apply to two tissues so we list them in X. For FUN, let's just create a simple function that returns exactly what is given ...
apply( c("Leaf","Stem") , function(t) { t } )
apply( c("Leaf","Stem") , function(t) { t } )
apply( c("Leaf","Stem") , function(t){ t }
# We need to apply to two tissues so we list them in X. For FUN, let's just create a simple function that returns exactly what is given ...
apply( c("Leaf","Stem") , function(t){ t } )
# We need to apply to two tissues so we list them in X. For FUN, let's just create a simple function that returns exactly what is given ...
lapply( c("Leaf","Stem") , function(t){ t } )
# So, t is set to "Leaf" first, then "Stem"
# We need to be selecting rows of e there e$tissue is "Leaf" and then "Stem", so let's try returning versions of e with just those selected ...
lapply( c("Leaf","Stem") , function(t) { e[e$tissue==t,] } )
# Ok, and but what we want to work with is the tpm, so let's use qhat we know about data frames to extract just that column ...
lapply( c("Leaf","Stem") , function(t) { e[e$tissue==t,]$tpm } )
# Good, and what do we want with tpm? The median, so we use the function median() to calcualte it on those results ...
lapply( c("Leaf","Stem") , function(t) { median( e[e$tissue==t,]$tpm ) } )
# So close! We just prefer this as a vector not a list, so we use `sapply()`
sapply( c("Leaf","Stem") , function(t) { median( e[e$tissue==t,]$tpm ) } )
# ... except we enter the tissue and median tpm values using the calculations we worked out:
data.frame(
tissue    = c("Leaf","Stem"),
medianExp = sapply( c("Leaf","Stem") , function(t) { median( e[e$tissue==t,]$tpm ) } )
)
matrix(LETTERS)
# Define a matrix
m <- matrix(1:16,,nrow=4,ncol=4)
m
sample(100,4)
# Define another, with one column
( m2 <- matrix(sample(100,4),nrow=4) )
# Perform matrix multiplication
m1 %*% m2
# Define a matrix
( m1 <- matrix(1:16,nrow=4,ncol=4) )
# Define another, with one column
( m2 <- matrix(sample(100,4),nrow=4) )
# Perform matrix multiplication
m1 %*% m2
# Perform matrix multiplication
m2 %*% m1
# Index using row/column ranges or blank; nrow/ncol:
m1[2:nrow(m1),]
# Index using row/column ranges or blank; nrow/ncol:
m1[3:nrow(m1),]
m1[1,] - m2[,3]
m1[1,] - m1[,3]
m1 * 3.2
m1
m1[m1 < 6]
# Logical operations and assignment
m1[m1<6] <- m1[m1<6] + 0.5
m1
# Define a matrix
( m1 <- matrix(1:16,nrow=4,ncol=4) )
# Index using row/column ranges or blank; nrow/ncol:
m1[3:nrow(m1),] # Can also be assigned with `<-`
# Perform element-wise operations
m1 + m1
m1[1,] - m1[,3]
m1 * 3.2
# Logical operations and assignment
m1[m1<6] <- m1[m1<6]
# Define a matrix
( m1 <- matrix(1:16,nrow=4,ncol=4) )
# Index using row/column ranges or blank; nrow/ncol:
m1[3:nrow(m1),] # Can also be assigned with `<-`
# Perform element-wise operations
m1 + m1
m1[1,] - m1[,3]
m1 * 3.2
# Logical operations and assignment
m1[m1<6] <- -m1[m1<6] # make negative
# Define another, with one column
( m2 <- matrix(sample(100,4),nrow=4) )
m1
colMeans(m1)
colSums(m1)
colSums(m1) / nrow(m1)
rowSums(m1)
# Matrix-specific functions
colMeans(m1)
rowSums(m1)
# Transpose
t(m2)
# Transpose
t(m2)
# The `apply()` function is designed for matrices.
apply(m1,force)
# The `apply()` function is designed for matrices.
apply(m1,2,force)
m1
# The `apply()` function is designed for matrices.
apply(m1,2,function(col) {col/mean(col)} ) # The two refers to the function
?apply
a <- 2
if(a > 3){
print("a is more than 3! Doing thing A")
} else {
print("a is not more than 3! Doing thing B")
}
a <- 2
if(a > 3){
print("a is more than 3! Doing thing A")
} else if (a==1) {
print("a is 1! Doing thing B")
} else {
print("None of those things were true! Doing thing C")
}
GTs <- sample(0:2,500,replace=TRUE)
if((1:3)==2)
sapply( GTs , function(gt){
if(gt==0){
return("Ref")
} else if(gt==1){
return("Het")
} else if(gt==2){
return("Alt")
}
})
GTs <- sample(0:2,15,replace=TRUE)
sapply( GTs , function(gt){
if(gt==0){
return("Ref")
} else if(gt==1){
return("Het")
} else if(gt==2){
return("Alt")
}
})
GTs
# Examples of other ways:
# The "I know  trick you don't" method
out <- switch(GTs,`0`="hellp")
out
# Examples of other ways:
# The "I know  trick you don't" method
switch(GTs,`0`="hell",`1`="asd")
GTs
# Examples of other ways:
# The "I know  trick you don't" method
switch(GTs,"hello")
?switch
# Examples of other ways:
# The "I know  trick you don't" method
switch(GTs,"1"="one")
# Examples of other ways:
# The "I know  trick you don't" method
switch(GTs[1],"1"="one")
c("Ref","Het","Alt")[GTs+1]
# Examples of other ways:
out <- character(length(GTs))
out[GTs==0] <- "Ref"
out[GTs==1] <- "Het"
out[GTs==2] <- "Alt"
# ... etc ...
out
c("Ref","Het","Alt")[GTs+1]
magrittr::raise_to_power(4,2)
require(magrittr)
raise_to_power(4,2)
1:10 %>% add(4) %>% range %>% mean %>% raise_to_power(3)
mean(range((1:10)+4))**3
require(data.table)
e <- expand.grid(
geneID = paste0("GeneID:",1:6),
tissue = c("Stem","Leaf","Root","Influorescence"),
stringsAsFactors = F
)
e$tpm <- runif(6*4,0,1) ** 3
# The data ...
e <- expand.grid(
geneID = paste0("GeneID:",1:6),
tissue = c("Stem","Leaf","Root","Influorescence"),
stringsAsFactors = F
)
e$tpm <- runif(6*4,0,1) ** 3
# The solution with fundamental base functions and data frames:
data.frame(
tissue    = c("Leaf","Stem"),
medianExp = sapply( c("Leaf","Stem") , function(t) { median( e[e$tissue==t,]$tpm ) } )
)
# The solution with data.table
e[tissue %in% c("Leaf","Stem"),median(tpm),by=tissue]
e
# The solution with data.table
e[tissue %in% c("Leaf","Stem"),median(tpm),by=.(tissue)]
e[tissue %in% c("Leaf","Stem")]
# The data ...
e <- expand.grid(
geneID = paste0("GeneID:",1:6),
tissue = c("Stem","Leaf","Root","Influorescence"),
stringsAsFactors = F
)
e$tpm <- runif(6*4,0,1) ** 3
# Convert e to a data.table, with the help of a magrittr trick
e %<>% as.data.table
e
# The solution with data.table
e[tissue %in% c("Leaf","Stem"),median(tpm),by=.(tissue)]
# The solution with data.table
e[tissue %in% c("Leaf","Stem"),medianEx=median(tpm),by=.(tissue)]
# The solution with data.table
e[tissue %in% c("Leaf","Stem"),.(medianEx=median(tpm)),by=.(tissue)]
iris[iris$Species=="setaria"]
iris[iris$Species=="Setaria"]
iris$Species
iris[iris$Species=="setosa"]
iris
iris[iris$Species=="setosa",]
mean(iris[iris$Species=="setosa","Petal.Length"])
iris[iris$Species=="setosa","Petal.Length"] %>% mean
iris[Species=="setosa",Petal.Length]
iris %<>% as.data.table
iris[Species=="setosa",Petal.Length]
iris[iris$Species=="setosa","Petal.Length"] %>% mean
iris[iris$Species=="setosa","Petal.Length"]
mean(iris[iris$Species=="setosa","Petal.Length"])
?magrittr::`%<>%`
iris[Species=="setosa",Petal.Length] %>% mean
iris[Species=="setosa",mean(Petal.Length)]
require(ggplot2)
ggplot( iris , aes( x = Petal.Width , y = Petal.Length , size=Sepal.Length ,  colour = Species ) ) +
geom_point() +
geom_smooth() +
facet_grid(Species~.)
ggplot( iris , aes( x = Petal.Width , y = Petal.Length , size=Sepal.Length ,  colour = Species ) ) +
geom_point()
ggplot( iris , aes( x = Petal.Width , y = Petal.Length , size=Sepal.Length ,  colour = Species ) ) +
geom_point() +
geom_smooth() +
facet_grid(Species~.,scales = "free")
ggplot( iris , aes( x = Petal.Width , y = Petal.Length , size=Sepal.Length ,  colour = Species ) ) +
geom_point() +
geom_smooth(method = "lm") +
facet_grid(Species~.,scales = "free")
ggplot( iris , aes( x = Petal.Width , y = Petal.Length , size=Sepal.Length ,  colour = as.factor(Species) ) ) +
geom_point() +
geom_smooth(method = "lm") +
facet_grid(Species~.,scales = "free")
ggplot( iris , aes( x = Petal.Width , y = Petal.Length , size=Sepal.Length ,  group = Species ) ) +
geom_point() +
geom_smooth(method = "lm") +
facet_grid(Species~.,scales = "free")
ggplot( iris , aes( x = Petal.Width , y = Petal.Length , size=Sepal.Length ,  group = Species ) ) +
geom_point() +
geom_smooth(method = "lm") +
facet_grid(Species~.,scales = "free")
