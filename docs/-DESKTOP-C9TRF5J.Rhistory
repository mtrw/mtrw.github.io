dr <- fread("data/drivers.csv")
ra <- fread("data/races.csv")
min(lt$milliseconds)
selectMe <- lt$milliseconds < 70000
selectMe
selectMe <- lt$milliseconds < 68000
selectMe
selectMe <- lt$milliseconds < 66000
selectMe
min(lt$milliseconds)
lt
selectMe <- lt$milliseconds < 66000
sum(selectMe)
selectMe <- lt$milliseconds < 67000
sum(selectMe)
selectMe <- lt$milliseconds < 68000
sum(selectMe)
selectMe <- lt$lap < 3
selectMe[1:10]
lt[selectMe,]
lt[selectMe,] # note now only data for laps 1 and 2 are there
rm(selectMe)
lt[lap<3,]
lt[lap<3 & driverId==20,]
lt[.N:1,]
dr[lt,on=list(driverId)]
lt <- dr[lt,on=.(driverId)]
lt <- ra[lt,on=.(raceId)]
lt
#What was the fastest lap?
lt[, min(milliseconds) ]
# ... in minutes
lt[, min(milliseconds)/1000/60 ]
# ... at an Australian Grand Prix (notice we are now also using the SELECT field)
lt[ name=="Australian Grand Prix" , min(milliseconds)/1000/60 ]
# ... and what years did Sebastian Vettel race in Australia?
lt[ name=="Australian Grand Prix" , unique(year) ]
# ... so what lap was Sebastian Vettel's fastest lap at the 2011 Australian Grand Prix?
lt[ name=="Australian Grand Prix" & year==2011 & surname=="Vettel" , lap[which(milliseconds==min(milliseconds))] ]
#What was the fastest lap?
lt[, min(milliseconds) ]
# ... in minutes
lt[, min(milliseconds)/1000/60 ]
# ... at an Australian Grand Prix (notice we are now also using the SELECT field)
lt[ name=="Australian Grand Prix" , min(milliseconds)/1000/60 ]
# ... and what years did Sebastian Vettel race in Australia?
lt[ name=="Australian Grand Prix" , unique(year) ]
# ... so what lap was Sebastian Vettel's fastest lap at the 2011 Australian Grand Prix?
lt[ name=="Australian Grand Prix" & year==2011 & surname=="Vettel" , lap[which(milliseconds==min(milliseconds))] ]
lt[ name=="Australian Grand Prix" & year==2011 & surname=="Vettel" , ][ milliseconds==min(milliseconds), lap ]
lt[ name=="Australian Grand Prix" & year==2011 & surname=="Vettel" , plot(x=lap,y=milliseconds/1000/60) ]
lt[ name=="Australian Grand Prix" & year==2011 & surname=="Vettel", ][ lap==max(lap), paste("At the end of the final lap, Vettel was in position",position,"!") ]
#Remember, `.()` is a shortcut for `list()`
lt[ , .( fastest_race_lap = min(milliseconds) , number_of_drivers = length(unique(driverId)) , average_driver_hours_per_race=sum(milliseconds)/3600000/length(unique(driverId)) ) ]
lt[ , .(
fastest_race_lap = min(milliseconds),
number_of_drivers = length(unique(driverId)),
average_driver_race_hours=sum(milliseconds)/3600000/length(unique(driverId))
)]
lt[, lap %in c(4,7,22)]
lt[, lap %in c(4,7,22)]
lt[, lap %in% c(4,7,22)]
lt[lap %between% c(4,7),]
#(l)ap (t)imes, (A)ustralian GP
lt[,unique(name)]
#(l)ap (t)imes, (A)ustralian GP
lt[,unique(name)] # Just to have a look at the Grand Prix names
ltA <- lt[ name=="Australian Grand Prix", .(
forename,
surname,
lap,
milliseconds,
position,
name,
circuitId,
year
)]
ltA
require(data.table)
lt <- fread("data/lapTimes.csv")
dr <- fread("data/drivers.csv")
ra <- fread("data/races.csv")
lt[5,]
lt[1:5]
lt[,1]
lt[,"lap"]
lt[,c("lap","time")]
dr$forename[1:10]
# or perhaps you prefer ...
dr[1:10]$forename
selectMe <- lt$lap < 3
selectMe[1:10]
lt[selectMe,] # Note now only data for laps 1 and 2 are there
rm(selectMe)  # It's good to clean up variables you don't need later to save memory
# Four steps ... really?
lt[lap<3,]
lt[lap<3 & driverId==20,]
lt[order(milliseconds),]
lt[.N:1,]
lt[lap %between% c(4,7),] # Select laps between (and including) 4 and 7
lt[lap %in% c(4,6,7),] # Select laps 4, 6 and 7
lt[!lap %in% c(4,6,7),] # Select all laps except 4, 6 and 7
dr[lt,on=list(driverId)]
lt <- dr[lt,on=.(driverId)]
lt <- ra[lt,on=.(raceId)]
#What was the fastest lap?
lt[, min(milliseconds) ]
# ... in minutes
lt[, min(milliseconds)/1000/60 ]
# ... at an Australian Grand Prix (notice we are now also using the SELECT field)
lt[ name=="Australian Grand Prix" , min(milliseconds)/1000/60 ]
# ... and what years did Sebastian Vettel race in Australia?
lt[ name=="Australian Grand Prix" , unique(year) ]
# ... so what lap was Sebastian Vettel's fastest lap at the 2011 Australian Grand Prix?
lt[ name=="Australian Grand Prix" & year==2011 & surname=="Vettel" , lap[which(milliseconds==min(milliseconds))] ]
lt[ name=="Australian Grand Prix" & year==2011 & surname=="Vettel" , ][ milliseconds==min(milliseconds), lap ]
lt[ name=="Australian Grand Prix" & year==2011 & surname=="Vettel" , plot(x=lap,y=milliseconds/1000/60) ]
lt[ name=="Australian Grand Prix" & year==2011 & surname=="Vettel", ][ lap==max(lap), paste("At the end of the final lap, Vettel was in position",position,"!") ]
#Remember, `.()` is a shortcut for `list()`
lt[ , .( fastest_race_lap = min(milliseconds) , number_of_drivers = length(unique(driverId)) , average_driver_hours_per_race=sum(milliseconds)/3600000/length(unique(driverId)) ) ]
lt[ , .(
fastest_race_lap = min(milliseconds),
number_of_drivers = length(unique(driverId)),
average_driver_race_hours=sum(milliseconds)/3600000/length(unique(driverId))
)]
#(l)ap (t)imes, (A)ustralian GP
lt[,unique(name)] # Just to have a look at the Grand Prix names
ltA <- lt[ name=="Australian Grand Prix", .(
forename,
surname,
lap,
milliseconds,
position,
name,
circuitId,
year
)]
#add two columns using chaining
ltA[,seconds:=milliseconds/1000][,fullname:=paste(forename,surname)]
ltA
#replace spaces with underscores in $name
ltA[,name:=gsub(" ","_",name)]
ltA
ltA[,milliseconds:=NULL]
ltA
ltA[ , mean(seconds) , by=.(year) ]
ltA[ , .( mean_laptime = mean(seconds) ) , by=.(year) ]
ltA[ , .( mean_laptime = mean(seconds) ) , by=.(year,fullname) ]
ltA[ , .( mean_laptime = mean(seconds) ,  fastest_lap = min(seconds) ) , by=.(year,fullname) ]
ltA[ year > 2010 , .( mean_laptime = mean(seconds) ,  fastest_lap = min(seconds) ) , by=.(year,fullname) ]
require(ggplot2)
ggplot(
data=ltA[ , .( mean_laptime = mean(seconds) ,  fastest_lap = min(seconds) ) , by=.(year,fullname) ],
mapping=aes(x=year,y=fastest_lap,colour=fullname)
) + geom_line() + theme(legend.position = "none")
ltA[,.(N=.N),by=.(surname)]
ltA[,.N,by=.(surname)]
ltA[,.SD[seconds==min(seconds)],by=.(year)]
ltA
setorder(ltA,year,surname) #sort first by year, then by surname within each year
ltA
setorder(ltA,year,-surname) #Use a negative sign to reverse the ordering
ltA
setkey(ltA,forename,lap) #Note you cannot use `-` to reverse the order. That's why `setorder()` still exists
#This shows you that the data.table now has an attribute indicating which columns are sorted, or "keys", in the lingo
attributes(ltA)["sorted"]
setorder(ltA,-year)
#Obviously, if you reorder the rows later the keys will be removed.
attributes(ltA)["sorted"]
newDt <- data.table(
colCharacter = c("h","e","l","l","o","!"),
colInteger   = 1L:2L,
colLogical   = c(F,F,T)
)
newDt
newDt
addCol(newDt)
newDt
function <- addCol(dt){
addCol <- function(dt){
dt[,newCol:=1:.N]
return(NULL)
}
newDt
addCol(newDt)
newDt
newDt
newDt
setnames(newDt,c("colCharacter","newCol"),c("colChar","numbers"))
colnames(newDt)
setnames(newDt,c("colCharacter","newCol"),c("colChar","numbers"))
colnames(newDt)
colnames(newDt)
newDt %>% setNames(colnames(.),LETTERS[1:(ncol(.))])
# I like to use it in conjunction with magrittr pipes
require(magrittr)
newDt %>% setNames(colnames(.),LETTERS[1:(ncol(.))])
newDt %>% setnames(colnames(.),LETTERS[1:(ncol(.))])
colnames(newDt)
newDt
class(newDt)
ltA
ltA[forename=="Lewis"]
ltA[forename=="George"]
ltA[forename=="Max"]
ltA[fullname=="Charles Leclerc"]
ltA[forename=="Charles"]
ltA[forename=="Charles",unique(fullname)]
lt[forename=="Charles",unique(fullname)]
lt[forename=="Charles",unique(surname)]
require(data.table)
lt <- fread("data/lapTimes.csv")
dr <- fread("data/drivers.csv")
ra <- fread("data/races.csv")
lt
lt[5,]
lt[1:5]
lt[,1]
lt[,"lap"]
lt[,c("lap","time")]
dr$forename[1:10]
# or perhaps you prefer ...
dr[1:10]$forename
selectMe <- lt$lap < 3
selectMe[1:10]
lt[selectMe,] # Note now only data for laps 1 and 2 are there
rm(selectMe)  # It's good to clean up variables you don't need later to save memory
# Four steps ... really?
lt[lap<3,]
lt[lap<3 & driverId==20,]
lt[order(milliseconds),]
lt[.N:1,]
lt[lap %between% c(4,7),] # Select laps between (and including) 4 and 7
lt[lap %in% c(4,6,7),] # Select laps 4, 6 and 7
lt[!lap %in% c(4,6,7),] # Select all laps except 4, 6 and 7
dr[lt,on=list(driverId)]
lt <- dr[lt,on=.(driverId)]
lt <- ra[lt,on=.(raceId)]
#What was the fastest lap?
lt[, min(milliseconds) ]
# ... in minutes
lt[, min(milliseconds)/1000/60 ]
# ... at an Australian Grand Prix (notice we are now also using the SELECT field)
lt[ name=="Australian Grand Prix" , min(milliseconds)/1000/60 ]
# ... and what years did Sebastian Vettel race in Australia?
lt[ name=="Australian Grand Prix" , unique(year) ]
# ... so what lap was Sebastian Vettel's fastest lap at the 2011 Australian Grand Prix?
lt[ name=="Australian Grand Prix" & year==2011 & surname=="Vettel" , lap[which(milliseconds==min(milliseconds))] ]
lt[ name=="Australian Grand Prix" & year==2011 & surname=="Vettel" , ][ milliseconds==min(milliseconds), lap ]
lt[ name=="Australian Grand Prix" & year==2011 & surname=="Vettel" , plot(x=lap,y=milliseconds/1000/60) ]
lt[ name=="Australian Grand Prix" & year==2011 & surname=="Vettel", ][ lap==max(lap), paste("At the end of the final lap, Vettel was in position",position,"!") ]
#Remember, `.()` is a shortcut for `list()`
lt[ , .( fastest_race_lap = min(milliseconds) , number_of_drivers = length(unique(driverId)) , average_driver_hours_per_race=sum(milliseconds)/3600000/length(unique(driverId)) ) ]
lt[ , .(
fastest_race_lap = min(milliseconds),
number_of_drivers = length(unique(driverId)),
average_driver_race_hours=sum(milliseconds)/3600000/length(unique(driverId))
)]
#(l)ap (t)imes, (A)ustralian GP
lt[,unique(name)] # Just to have a look at the Grand Prix names
ltA <- lt[ name=="Australian Grand Prix", .(
forename,
surname,
lap,
milliseconds,
position,
name,
circuitId,
year
)]
#add two columns using chaining
ltA[,seconds:=milliseconds/1000][,fullname:=paste(forename,surname)]
ltA
#replace spaces with underscores in $name
ltA[,name:=gsub(" ","_",name)]
ltA
ltA[,milliseconds:=NULL]
ltA
ltA[ , mean(seconds) , by=.(year) ]
ltA[ , .( mean_laptime = mean(seconds) ) , by=.(year) ]
ltA[ , .( mean_laptime = mean(seconds) ) , by=.(year,fullname) ]
ltA[ , .( mean_laptime = mean(seconds) ,  fastest_lap = min(seconds) ) , by=.(year,fullname) ]
ltA[ year > 2010 , .( mean_laptime = mean(seconds) ,  fastest_lap = min(seconds) ) , by=.(year,fullname) ]
require(ggplot2)
ggplot(
data=ltA[ , .( mean_laptime = mean(seconds) ,  fastest_lap = min(seconds) ) , by=.(year,fullname) ],
mapping=aes(x=year,y=fastest_lap,colour=fullname)
) + geom_line() + theme(legend.position = "none")
newDt <- data.table(
colCharacter = c("h","e","l","l","o","!"),
colInteger   = 1L:2L,
colLogical   = c(F,F,T)
)
newDt
ltA[,.(N=.N),by=.(surname)]
ltA[,.N,by=.(surname)]
ltA[,.SD[seconds==min(seconds)],by=.(year)]
ltA
setorder(ltA,year,surname) #sort first by year, then by surname within each year
ltA
setorder(ltA,year,-surname) #Use a negative sign to reverse the ordering
ltA
setkey(ltA,forename,lap) #Note you cannot use `-` to reverse the order. That's why `setorder()` still exists
#This shows you that the data.table now has an attribute indicating which columns are sorted, or "keys", in the lingo
attributes(ltA)["sorted"]
setorder(ltA,-year)
#Obviously, if you reorder the rows later the keys will be removed.
attributes(ltA)["sorted"]
setkey(ltA,forename,lap) #Note you cannot use `-` to reverse the order. That's why `setorder()` still exists
#This shows you that the data.table now has an attribute indicating which columns are sorted, or "keys", in the lingo
attributes(ltA)["sorted"]
setorder(ltA,-year)
#Obviously, if you reorder the rows later the keys will be removed.
attributes(ltA)["sorted"]
colnames(newDt)
setnames(newDt,c("colCharacter","colInteger"),c("colChar","colInt"))
colnames(newDt)
# I like to use it in conjunction with magrittr pipes (if you don't get it don't worry, tutorial for another day)
require(magrittr)
newDt %>% setnames(colnames(.),LETTERS[1:(ncol(.))])
newDt
# Chunk 1: setup
require(data.table)
options(datatable.print.nrows = 10,datatable.print.topn = 3)
# Chunk 3
lt <- fread("data/lapTimes.csv")
dr <- fread("data/drivers.csv")
ra <- fread("data/races.csv")
# Chunk 4
lt
# Chunk 5
lt[5,]
lt[1:5]
lt[,1]
lt[,"lap"]
lt[,c("lap","time")]
# Chunk 6
dr$forename[1:10]
# or perhaps you prefer ...
dr[1:10]$forename
# Chunk 7
selectMe <- lt$lap < 3
selectMe[1:10]
lt[selectMe,] # Note now only data for laps 1 and 2 are there
rm(selectMe)  # It's good to clean up variables you don't need later to save memory
# Four steps ... really?
# Chunk 8
lt[lap<3,]
lt[lap<3 & driverId==20,]
# Chunk 9
lt[order(milliseconds),]
# Chunk 10
lt[.N:1,]
# Chunk 11
lt[lap %between% c(4,7),] # Select laps between (and including) 4 and 7
lt[lap %in% c(4,6,7),] # Select laps 4, 6 and 7
lt[!lap %in% c(4,6,7),] # Select all laps except 4, 6 and 7
# Chunk 12
dr[lt,on=list(driverId)]
# Chunk 13
lt <- dr[lt,on=.(driverId)]
lt <- ra[lt,on=.(raceId)]
# Chunk 14
#What was the fastest lap?
lt[, min(milliseconds) ]
# ... in minutes
lt[, min(milliseconds)/1000/60 ]
# ... at an Australian Grand Prix (notice we are now also using the SELECT field)
lt[ name=="Australian Grand Prix" , min(milliseconds)/1000/60 ]
# ... and what years did Sebastian Vettel race in Australia?
lt[ name=="Australian Grand Prix" , unique(year) ]
# ... so what lap was Sebastian Vettel's fastest lap at the 2011 Australian Grand Prix?
lt[ name=="Australian Grand Prix" & year==2011 & surname=="Vettel" , lap[which(milliseconds==min(milliseconds))] ]
# Chunk 15
lt[ name=="Australian Grand Prix" & year==2011 & surname=="Vettel" , ][ milliseconds==min(milliseconds), lap ]
# Chunk 16
lt[ name=="Australian Grand Prix" & year==2011 & surname=="Vettel" , plot(x=lap,y=milliseconds/1000/60) ]
# Chunk 17
lt[ name=="Australian Grand Prix" & year==2011 & surname=="Vettel", ][ lap==max(lap), paste("At the end of the final lap, Vettel was in position",position,"!") ]
# Chunk 18
#Remember, `.()` is a shortcut for `list()`
lt[ , .( fastest_race_lap = min(milliseconds) , number_of_drivers = length(unique(driverId)) , average_driver_hours_per_race=sum(milliseconds)/3600000/length(unique(driverId)) ) ]
# Chunk 20
#(l)ap (t)imes, (A)ustralian GP
lt[,unique(name)] # Just to have a look at the Grand Prix names
ltA <- lt[ name=="Australian Grand Prix", .(
forename,
surname,
lap,
milliseconds,
position,
name,
circuitId,
year
)]
# Chunk 21
#add two columns using chaining
ltA[,seconds:=milliseconds/1000][,fullname:=paste(forename,surname)]
ltA
# Chunk 22
#replace spaces with underscores in $name
ltA[,name:=gsub(" ","_",name)]
ltA
# Chunk 23
ltA[,milliseconds:=NULL]
ltA
# Chunk 24
ltA[ , mean(seconds) , by=.(year) ]
# Chunk 25
ltA[ , .( mean_laptime = mean(seconds) ) , by=.(year) ]
# Chunk 26
ltA[ , .( mean_laptime = mean(seconds) ) , by=.(year,fullname) ]
# Chunk 27
ltA[ , .( mean_laptime = mean(seconds) ,  fastest_lap = min(seconds) ) , by=.(year,fullname) ]
# Chunk 28
ltA[ year > 2010 , .( mean_laptime = mean(seconds) ,  fastest_lap = min(seconds) ) , by=.(year,fullname) ]
# Chunk 29
require(ggplot2)
ggplot(
data=ltA[ , .( mean_laptime = mean(seconds) ,  fastest_lap = min(seconds) ) , by=.(year,fullname) ],
mapping=aes(x=year,y=fastest_lap,colour=fullname)
) + geom_line() + theme(legend.position = "none")
# Chunk 30
newDt <- data.table(
colCharacter = c("h","e","l","l","o","!"),
colInteger   = 1L:2L,
colLogical   = c(F,F,T)
)
newDt
# Chunk 31
ltA[,.(N=.N),by=.(surname)]
# Chunk 33
ltA[,.SD[seconds==min(seconds)],by=.(year)]
# Chunk 34
ltA
setorder(ltA,year,surname) #sort first by year, then by surname within each year
ltA
setorder(ltA,year,-surname) #Use a negative sign to reverse the ordering
ltA
# Chunk 35
setkey(ltA,forename,lap) #Note you cannot use `-` to reverse the order. That's why `setorder()` still exists
#This shows you that the data.table now has an attribute indicating which columns are sorted, or "keys", in the lingo
attributes(ltA)["sorted"]
setorder(ltA,-year)
#Obviously, if you reorder the rows later the keys will be removed.
attributes(ltA)["sorted"]
# Chunk 36
colnames(newDt)
setnames(newDt,c("colCharacter","colInteger"),c("colChar","colInt"))
colnames(newDt)
# I like to use it in conjunction with magrittr pipes (if you don't get this command don't worry, magrittr can be a tutorial for another day)
require(magrittr)
newDt %>% setnames(colnames(.),LETTERS[1:(ncol(.))])
newDt
# Chunk 37
class(newDt) #See? It's classed as a data.table AND a data.frame
# Chunk 38
addCol <- function(dt){
dt[,newCol:=1:.N]
return(NULL)
}
# Chunk 39
colnames(newDt)
addCol(newDt)
colnames(newDt)
fastLapDt <- lt[surname=="Verstappen",{
lastLap <- max(lap)
verstappenFastest <- .SD[,lap[milliseconds==min(milliseconds)]]
.( lapsBeforeLastFastest = verstappenFastest - lastLap )
},by=.(circuitId,year)]
density( fastLapDt$lapsBeforeLastFastest, bw=1 ) %>% plot
hist(fastLapDt$lapsBeforeLastFastest)
hist(fastLapDt$lapsBeforeLastFastest,breaks = 100)
fastLapDt <- lt[,{
lastLap <- max(lap)
verstappenFastest <- .SD[,lap[milliseconds==min(milliseconds)]]
.( lapsBeforeLastFastest = verstappenFastest - lastLap )
},by=.(circuitId,year)]
hist(fastLapDt$lapsBeforeLastFastest,breaks = 100)
hist(fastLapDt$lapsBeforeLastFastest,breaks=function(x){print(x);unique(x)})
hist(fastLapDt$lapsBeforeLastFastest,breaks=function(x){print(x);nu(x)})
hist(fastLapDt$lapsBeforeLastFastest,breaks=function(x){print(x);length(unique(x))})
hist(fastLapDt$lapsBeforeLastFastest,breaks=function(x){min(x):0})
lt
fread("http://en.wikipedia.org/wiki/2011_Australian_Grand_Prix")
download.file("http://en.wikipedia.org/wiki/2011_Australian_Grand_Prix")
readLines("http://en.wikipedia.org/wiki/2011_Australian_Grand_Prix")
readLines("http://en.wikipedia.org/wiki/2011_Australian_Grand_Prix")[1:3,]
ds
ra
fread("data/circuits.csv")
readLines("http://en.wikipedia.org/wiki/Melbourne_Grand_Prix_Circuit")
ltA
lt[max(year)]
lt[,max(year)]
lt[,max(year)]
dr
ra
lt
ltA
ra
months
months(1)
?months
months(ra$date)
print(ra)
ra[,month:=months(ra$date)] #Create column of months using this glorious date-parsing function
print(ra)
# Make a directory to store the files in
dir.create("lapTimesPerMonth")
?<<-
?`<<-`
